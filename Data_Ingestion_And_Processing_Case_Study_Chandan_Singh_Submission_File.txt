-----------------------------------------------------------------------------------------------------------------------------
---------------------------------------DATA INGESTION AND PROCESSING CASE STUDY-----------------------------------------------
------------------------------------------------------------------------------------------------------------------------------                                                                                          
--------
-------- Author: Chandan Singh(singh.chandan1809@gmail.com)
--------                                                                      
-------- First Draft Date 11/05/2020                                                                                                                                             
-------- Current Version: 1.0                                                                    
--------                                 
-------- Scope:  The DDLs and SQLs the creation of Objects and Analysis related to NYC Taxi case study                
--------
--------
-------- History: 
--------      11/05/2020 - chandan singh (u8048639) - 1.0 - First Draft                                   
--------                                                                 
--------                                                                        
--------                                                                        
-----------------------------------------------------------------------------------------------------------------------------


-- #################################################################################################### --
--                            Problem Statement                                                         --
-- #################################################################################################### --

-- The New York City Taxi & Limousine Commission (TLC) has provided a dataset of trips made by the taxis in the New York City.
-- The detailed trip-level data is more than just a vast list of taxi pickup and drop off coordinates. 
-- The purpose of this dataset is to get a better understanding of the taxi system so that the city of New York can improve the efficiency of in-city commutes. 
-- In this assignment, we ONLY consider the data of yellow taxis for November and December of the year 2017.



-- #################################################################################################### --
--                            Assumptions                                                               --
-- #################################################################################################### --

-- 1. Store the date fields "TPEP_PICKUP_DATETIME" and "TPEP_DROPOFF_DATETIME" as a string in order to avoide date format issues
-- 2. The whole values are stored as INT
-- 3. All the finance(floating points) related fields such as "TIP_AMOUNT", "TOTAL_AMOUNT", "FARE_AMOUNT" are stored as DOUBLE.
-- 4. For this exercise, I am using my own database "CHANDAN_UPGRAD". This needs to be changed, if working on a different database.



-- Change the databse to chandan_upgrad;

use chandan_upgrad;


---------------------- Setup The Environment -------------------------------------------------------------------------------


ADD JAR /opt/cloudera/parcels/CDH/lib/hive/lib/hive-hcatalog-core-1.1.0-cdh5.11.2.jar;

SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;
set hive.exec.dynamic.partition.mode=nonstrict;


--------------------- Create a Temp table to store the raw data -----------------------------------------------------------


create table nyc_taxi_raw
(
	vendorid 				 int
	, tpep_pickup_datetime   string
	, tpep_dropoff_datetime  string
	, passenger_count        int
	, trip_distance	         double
	, ratecodeid             int
	, store_and_fwd_flag     string
	, pulocationid           int
	, dolocationid           int
	, payment_type           string
	, fare_amount            double
	, extra					 double
	, mta_tax                double
	, tip_amount             double
	, tolls_amount           double
	, improvement_surcharge	 double
	, total_amount           double
)
row format delimited
fields terminated by ','
location '/common_folder/nyc_taxi_data/'
tblproperties("skip.header.line.count"="1");


-- There are total 1174569 records in the raw table



-- #################################################################################################### --
--                            DATA QUALITY CHECKS                                                       --
-- #################################################################################################### --



-- Question #1) How many records has each TPEP [Taxi-Passenger Experience Enhancement Program Provider] provided? Write a query that summarises the number of records of each provider.

-- Query Used:

select vendorid
       , count(1) as `vendor_record_count`
from nyc_taxi_raw
group by vendorid;

-- Answer #1)
-- TPEP Provider with Vendorid = 1(Creative Mobile Technologies, LLC) has 527386 records, while provider with vendorid = 2(VeriFone Inc.) has 647183 recors.




-- Question #2) The data provided is for months November and December only. Check whether the data is consistent, and if not, identify the data quality issues. Mention all data quality issues in comments.

-- Query Used:

select year(from_unixtime(unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss')) as `Year`
       , month(from_unixtime(unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss')) as `Mnth`
       , count(1)
from nyc_taxi_raw
group by year(from_unixtime(unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss'))
         , month(from_unixtime(unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss'));

-- Answer #2)
-- There are records other than Nov and Dec 2017, present in the dataset. Their count is:
-- One record from Jan, 2003.
-- Two records from Dec, 2008.
-- One record from Jan, 2009.
-- Four records from Jan, 2018.
-- Six records from Oct, 2018.




-- Question #3) You might have encountered unusual or erroneous rows in the dataset. Can you conclude which vendor is doing a bad job in providing the records using different columns of the dataset?

--Answer #3)

-- Query Used:

with
taxi_data as
        (
         select vendorid
                , unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss') as `tpep_pickup_datetime`
                , unix_timestamp(tpep_dropoff_datetime, 'yyyy-MM-dd HH:mm:ss') as `tpep_dropoff_datetime`
                , trip_distance
                , fare_amount
                , total_amount
                , passenger_count
                , extra
                , mta_tax
                , ratecodeid
                , improvement_surcharge
        from nyc_taxi_raw
       ),
invalid_time as
            (
                select vendorid
                        , count(1) as `Invalid_Pickup_And_Dropoff_Count`
                from taxi_data
                where tpep_pickup_datetime >= tpep_dropoff_datetime
                group by vendorid
            ),
            
zero_passenger as           
                (
                    select vendorid
                            , count(1) as `Zero_Passenger_Count`
                    from taxi_data
                    where passenger_count = 0
                    group by vendorid
                ),  
zero_tip_distcance as
                (
                    select vendorid
                            , count(1) as `Zero_Trip_Distance_Count`
                    from taxi_data
                    where trip_distance = 0
                    group by vendorid
                                        
                ),
zero_fare as 
                (
                    select vendorid
                            , count(1) as `Zero_Fare_Amount_Count`
                    from taxi_data
                    where fare_amount = 0
                    group by vendorid
                ),
zero_tot_amount as 
                (
                    select vendorid
                            , count(1) as `Zero_Total_Amount_Count`
                    from taxi_data
                    where total_amount = 0
                    group by vendorid
                ),
invalid_extra as (
                    select vendorid
                            , count(1) as `Invalid_Extra_Amount_Count`
                    from taxi_data
                    where extra not in (0, 0.5, 1)
                    group by vendorid
                ),
invalid_mta as (
                    select vendorid
                            , count(1) as `Invalid_MTA_Count`
                    from taxi_data
                    where mta_tax not in (0, 0.5)
                    group by vendorid
                ),
invalid_rate as (
                    select vendorid
                            , count(1) as `Invalid_Rate_code`
                    from taxi_data
                    where ratecodeid not in (1,2,3,4,5,6)
                    group by vendorid
                ),
invalid_imp_surchrge as (
                        select vendorid
                                , count(1) as `Invalid_Imp_Surcharge`
                        from taxi_data
                        where improvement_surcharge not in (0,0.3)
                        group by vendorid
                ),
all_data as 
                (
                select t1.vendorid
                     , Invalid_Pickup_And_Dropoff_Count
                     , Zero_Passenger_Count
                     , Zero_Trip_Distance_Count
                     , Zero_Fare_Amount_Count
                     , Zero_Total_Amount_Count
                     , Invalid_Extra_Amount_Count
                     , Invalid_MTA_Count
                     , Invalid_Rate_code
                     , Invalid_Imp_Surcharge
                from invalid_time t1
                left join zero_passenger t2
                  on t1.vendorid = t2.vendorid
                left join zero_tip_distcance t3
                  on t1.vendorid = t3.vendorid
                left join zero_fare t4
                  on t1.vendorid = t4.vendorid
                left join zero_tot_amount t5
                 on t1.vendorid = t5.vendorid
                left join invalid_extra t6
                 on t1.vendorid = t6.vendorid
                left join invalid_mta t7
                 on t1.vendorid = t7.vendorid
                left join invalid_rate t8
                 on t1.vendorid = t8.vendorid
                left join invalid_imp_surchrge t9
                 on t1.vendorid = t9.vendorid
                )
select  case vendorid
            when 1
                then 'Creative Mobile Technologies'
            when 2 
                then 'VeriFone Inc'
            else 
                'Unknown' 
         end as `vendor`
        , Invalid_Pickup_And_Dropoff_Count
        , Zero_Passenger_Count
        , Zero_Trip_Distance_Count
        , Zero_Fare_Amount_Count
        , Zero_Total_Amount_Count
        , Invalid_Extra_Amount_Count
        , Invalid_MTA_Count
        , Invalid_Rate_code
        , Invalid_Imp_Surcharge
from all_data;


-- There are 3492 records provided by Vendorid = 1(Creative Mobile Technologies, LLC), where "TPEP_PICKUP_DATETIME" >= "TPEP_DROPOFF_DATETIME", while for vendorid = 2(VeriFone Inc.), there are 3063 such records.
-- Vendor -1 is not providing the accurate information with respect to Trip timings.

-- There are 6813 records provided by Vendorid = 1(Creative Mobile Technologies, LLC), where "PASSENGER_COUNT" is 0, while for vendorid = 2(VeriFone Inc.), there are 11 such records.
-- Vendor -1 is not providing the accurate information with respect to the column "PASSENGER_COUNT".

-- There are 4217 records provided by Vendorid = 1(Creative Mobile Technologies, LLC), where "TRIP_DISTANCE" is 0, while for vendorid = 2(VeriFone Inc.), there are 3185 such records.
-- Vendor -1 is not providing the accurate information with respect to the column "TRIP_DISTANCE".

-- There are 231 records provided by Vendorid = 1(Creative Mobile Technologies, LLC), where "FARE_AMOUNT" is 0, while for vendorid = 2(VeriFone Inc.), there are 81 such records.
-- Vendor -1 is not providing the accurate information with respect to the column "FARE_AMOUNT".

-- There are 42 records provided by Vendorid = 1(Creative Mobile Technologies, LLC), where "TOTAL_AMOUNT" is 0, while for vendorid = 2(VeriFone Inc.), there are 81 such records.
-- Vendor -2 is not providing the accurate information with respect to the column "TOTAL_AMOUNT".

-- There are 1823 records provided by Vendorid = 1(Creative Mobile Technologies, LLC), where "EXTRA" is other than 0, 0.5 and 1, while for vendorid = 2(VeriFone Inc.), there are 3033 such records.
-- Vendor -2 is not providing the accurate information with respect to the column "EXTRA".

-- There are 1 records provided by Vendorid = 1(Creative Mobile Technologies, LLC), where "MTA_TAX" is other than 0, and 0.5, while for vendorid = 2(VeriFone Inc.), there are 547 such records.
-- Vendor -2 is not providing the accurate information with respect to the column "MTA_TAX".


-- There are 8 records provided by Vendorid = 1(Creative Mobile Technologies, LLC), where "RATECODEID" is other than 1-6, while for vendorid = 2(VeriFone Inc.), there are 1 such records.
-- Vendor -1 is not providing the accurate information with respect to the column "RATECODEID

-- There are no records provided by Vendorid = 1(Creative Mobile Technologies, LLC), where "IMPROVEMENT_SURCHARGE" is other than 0 and 0.3, while for vendorid = 2(VeriFone Inc.), there are 562 such records.
-- Vendor -2 is not providing the accurate information with respect to the column "IMPROVEMENT_SURCHARGE".



-- CONCLUSION =>  Based on the above analysis Vendorid = 1(Creative Mobile Technologies, LLC) is not providing the accurate/correct data, due to which the dataset is not cleaned and has got erroneous records.





-- #################################################################################################### --
--                      CREATE ORC TABLE TO STORE CLEAN DATA                                           --
-- #################################################################################################### --


-- -------------------- Create the external table "NYC_TAXI_TABLE_ORC" to store the clean data in ORC format -----------------------------------------------------------

-- We could create partion on Months and Days, but that would have large number of partions(61 patition to be precised). Therefore, let's create partition on Year and Month.
-- We will store the data files at the location '/user/hive/warehouse/singh.chandan1809_gmail/nyc_taxi_table_orc'. This needs to be changed according to the desired location.

create external table nyc_taxi_table_orc
(  vendorid 				 int
	, tpep_pickup_datetime   timestamp
	, tpep_dropoff_datetime  timestamp
	, passenger_count        int
	, trip_distance	         double
	, ratecodeid             int
	, store_and_fwd_flag     string
	, pulocationid           int
	, dolocationid           int
	, payment_type           string
	, fare_amount            double
	, extra					 double
	, mta_tax                double
	, tip_amount             double
	, tolls_amount           double
	, improvement_surcharge	 double
	, total_amount           double
  )partitioned by (yr int, mnth int)
stored as orc location '/user/hive/warehouse/singh.chandan1809_gmail/nyc_taxi_table_orc'
tblproperties("orc.compression" = "snappy");



-- There are 20956 records, that seem to have data quality issues(mentioned above), hence, it would be better to filter out these records from the further analysis
-- Query Used:

select count(1) as `Invalid_Record_Count`--20956
from nyc_taxi_raw
where unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss') >= unix_timestamp(tpep_dropoff_datetime, 'yyyy-MM-dd HH:mm:ss')
 or PASSENGER_COUNT = 0
 or TRIP_DISTANCE = 0
 or FARE_AMOUNT = 0
 or TOTAL_AMOUNT = 0
 or extra not in (0,0.5,1)
 or mta_tax not in (0, 0.5)
 or ratecodeid not in (1,2,3,4,5,6)
 or improvement_surcharge not in (0, 0.3)
 or ( year(from_unixtime(unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss')) <> 2017
     and month (from_unixtime(unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss')) not in (11,12)
    );



-- --Populate the table "NYC_TAXI_TABLE_ORC" with the data from the Raw table, after cleaning up the erroneous records

insert overwrite table nyc_taxi_table_orc partition(yr, mnth)
select vendorid 				
        , from_unixtime(unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss')
        , from_unixtime(unix_timestamp(tpep_dropoff_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss')
        , passenger_count       
        , trip_distance	        
        , ratecodeid            
        , store_and_fwd_flag    
        , pulocationid          	
        , dolocationid          
        , payment_type          
        , fare_amount           
        , extra					
        , mta_tax               
        , tip_amount            
        , tolls_amount          
        , improvement_surcharge	
        , total_amount
        , year(from_unixtime(unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss')) as yr
        , month(from_unixtime(unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss')) as mnth
from nyc_taxi_raw
where from_unixtime(unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss') < from_unixtime(unix_timestamp(tpep_dropoff_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss')
 and passenger_count > 0
 and trip_distance > 0
 and fare_amount > 0
 and total_amount > 0
 and extra in (0,0.5,1)
 and mta_tax in (0, 0.5)
 and ratecodeid in (1,2,3,4,5,6)
 and improvement_surcharge in (0, 0.3)
 and year(from_unixtime(unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss')) = 2017
 and month(from_unixtime(unix_timestamp(tpep_pickup_datetime, 'yyyy-MM-dd HH:mm:ss'), 'yyyy-MM-dd HH:mm:ss')) in (11,12);
 
 
-- Check the detailed(Partition Level) information of the table using the below command:

describe formatted nyc_taxi_table_orc;



-- There are total 1153605 records in the cleaned table, with one year Parition = 2017 and two sub/child partitions 11 and 12 within the Parent Partition.



-- ####################################################################################################--
--                                   ANALYSIS-I                                                       --
-- ####################################################################################################--


-- Question #1) Compare the overall average fare per trip for November and December.

-- Answer #1)

-- Query

select mnth
        , round(avg(fare_amount), 2) as `avg_fare_per_trip`
from nyc_taxi_table_orc
group by mnth
order by mnth;

-- In November, the overall average fare per trip was $12.91
-- In December, the overall average fare per trip was $12.7

-- The average fare in December is 1.6% less than that of November.




-- Question #2) Explore the ‘number of passengers per trip’ - how many trips are made by each level of ‘Passenger_count’? Do most people travel solo or with other people?

-- Answer #2)

-- Query

select passenger_count
      , count(1) as `l_count`
from nyc_taxi_table_orc
group by passenger_count
order by passenger_count;


-- There are 817036 trips with solo passenger.
-- There are 174785 trips with two passengers.
-- There are 50183 trips with three passengers.
-- There are 24680 trips with four passengers.
-- There are 54037 trips with five passengers.
-- There are 32882 trips with six passengers.
-- There are 3 trips with seven passengers.

-- No of trips with only Solo passenger => 817036
-- No of trips in group(2 or more)      => 336570
-- People prefer to travel solo, as these people account for more than 70% of total trips recorded.




-- Question #3) Which is the most preferred mode of payment?

-- Answer #3)

-- Query

select case payment_type
            when 1 then 'Credit Card'
            when 2 then 'Cash'
            when 3 then 'No Charge'
            when 4 then 'Dispute'
        end as payment_type
        , Payment_Type_Count
from 
    (
        select payment_type
              , count(1) as `Payment_Type_Count`
        from nyc_taxi_table_orc
        group by payment_type
        order by Payment_Type_Count desc
    )t;


-- No of Credit Card payment     => 779153
-- No of Cash payment            => 368661
-- No of trips with No Charge    => 4492
-- No of trips with Dispute      => 1300


-- Credit Card is the most preferred mode of payment which has 779153 trips, which is 67% of all the trips.




-- Question #4) What is the average tip paid per trip? 
--              Compare the average tip with the 25th, 50th and 75th percentiles and comment whether the ‘average tip’ is a representative statistic (of the central tendency) of ‘tip amount paid’. 

-- Answer #4)

-- In data dictionary, it is mentioned that "TIP_AMOUNT" is not recorded for cash payment, hence, we need to remove such records.


-- Query

select round(avg(tip_amount),2) as `avg_tip`
      , round(percentile_approx(tip_amount, 0.25),2) as `25th_Ptile`
      , round(percentile_approx(tip_amount, 0.50),2) as `50th_Ptile`
      , round(percentile_approx(tip_amount, 0.75),2) as `75th_Ptile`
      , round((percentile_approx(tip_amount, 0.75) -  percentile_approx(tip_amount, 0.25)),2) as `IQR`
      , min(tip_amount) as `Min_Tip`
      , max(tip_amount) as `Max_Tip`
from nyc_taxi_table_orc
where payment_type <> 2;


-- Average Tip 		=> 2.68
-- 25th Percentile  => 1.34
-- Median  			=> 2
-- 75th Percentile  => 3.05
-- Max Tip          => 150


-- We can clearly see that there are outliers, present in the dataset. This causes the distribution to be highly skewed(Right).
-- Also, Average tip is not equal to the Median, but it is $0.68 higher.
-- In this situation, the median is generally considered to be the best representative of the central location of the data. 
-- The more skewed the distribution, the greater the difference between the median and mean, and the greater emphasis should be placed on using the median as opposed to the mean. 




-- Question #5) Explore the ‘Extra’ (charge) variable - what fraction of total trips have an extra charge is levied?

-- Answer #5)

-- Query 1(Get the Total distinct Extra Charges)

select extra
     , count(1) as `extra_count`
from nyc_taxi_table_orc
group by extra
order by extra;


-- There are 621270 trips, where extra charges not levied.
-- There are 359821 trips, where extra levied is 0.5
-- There are 172515 trips, where extra levied is 1


-- Query 2 (Get the fraction of Extra Charges Levied out of Total Trips)
select 
       round((sum (
             case when extra <> 0
                    then 1
                else
                    0
            end 
           ) / count(1)),2) as `Fraction_Extra_Levied`
from nyc_taxi_table_orc;

-- The fraction of total trips, where extra charge is levied => 0.46(or 46%)





-- ####################################################################################################--
--                                   ANALYSIS-II                                                       --
-- ####################################################################################################--




-- Question #1) What is the correlation between the number of passengers on any given trip, and the tip paid per trip? Do multiple travellers tip more compared to solo travellers?

-- Answer #1)

-- Query

select round(corr(passenger_count, tip_amount),4) as `Corr_Passenger_Count_And_Tip`
from nyc_taxi_table_orc
where payment_type <> 2; -- excluding records, where Payment_Type is Cash


-- There is a very weak correlation 0f 0.009, exists between Number of Passengers and Tip paid.



-- Question #2) Segregate the data into five segments of ‘tip paid’: [0-5), [5-10), [10-15) , [15-20) and >=20. Calculate the percentage share of each bucket.

-- Answer #2) 

-- Query

with
taxi_data as
            (
                select tip_amount -- Get the Tip_Amount from the table
                from nyc_taxi_table_orc
            ),
taxi_data_count as 
                  (
                   select count(*) as `total_count` -- Get the Total Number of Records from the above CTE
                   from taxi_data
                  ),
bucket_count as
            (
        
            select tip_bucket
                , count(1) as `bucket_count`
            from
                (
                select case -- Create bucket
                        when tip_amount >= 0 and tip_amount < 5
                            then 
                                '0-5'
                        when tip_amount >= 5 and tip_amount < 10
                            then
                                '5-10'
                        when tip_amount >= 10 and tip_amount < 15
                            then
                                '10-15'
                        when tip_amount >= 15 and tip_amount < 20
                            then
                                '15-20'
                        else
                            '20_And_Above'
                     end as `Tip_Bucket`
                from taxi_data
                )t
            group by tip_bucket
            
        ) 
select tip_bucket
       , bucket_count
       , round((bucket_count/total_count)*100,2) as `Bucket_Fraction` -- Multiply the final value by 100 to get fraction in percentages to ease the readability
from bucket_count
cross join taxi_data_count
order by Bucket_Fraction desc;


-- No of Records in the Bucket 0-5 			=> 1065974
-- No of Records in the Bucket 5-10 		=> 65042
-- No of Records in the Bucket 10-15 		=> 19414
-- No of Records in the Bucket 15-20 		=> 2160
-- No of Records in the Bucket 20_And_Above => 1016


-- Bucket "0-5" contributes 92.4% of the total records.
-- Bucket "5-10" contributes 5.64% of the total records.
-- Bucket "10-15" contributes 1.68% of the total records.
-- Bucket "15-20" contributes 0.19% of the total records.
-- Bucket "20_And_Above" contributes 0.08% of the total records.



-- Question #3) Which month has a greater average ‘speed’ - November or December?

-- Answer #3) 

-- Query

select mnth
      , round(avg(trip_distance/time_taken),2) as `avg_speed`
from
    (
     select mnth 
           , trip_distance
           , (unix_timestamp(tpep_dropoff_datetime) - unix_timestamp(tpep_pickup_datetime))/3600 as `Time_Taken`
           , tpep_dropoff_datetime
           , tpep_pickup_datetime
     from nyc_taxi_table_orc
   )t
group by mnth;


-- The Average Speed in November => 10.97 MPH
-- The Average Speed in December => 11.07 MPH
-- Average speed in December is higher than the average speed of Taxis in November by 0.10 MPH.




-- Question #4) Analyse the average speed of the most happening days of the year, i.e. 31st December (New year’s eve) and 25th December (Christmas) and compare it with the overall average?

-- Answer #4) 

-- Query


-- To get the Average Speed, we need to use the columns Trip_Distance, Tpep_Pickup_Datetime, and Tpep_Pickup_Datetime
-- The unit of Trip Distance is Mile, whereas the Unit of Time Taken would be in Seconds, hence, we will devide the Time Taken by 3600 to convert it into Hours.

select distinct trip_day
    , round(overall_avg_speed,2) as `overall_avg_speed`
    , round(avg_speed_per_day,2) as `avg_speed_per_day`
from 
    (
    select trip_day
          , avg(trip_distance/time_taken)over() as `overall_avg_speed`
          , avg(trip_distance/time_taken)over(partition by Trip_Day) as `avg_speed_per_day`
          , mnth
    from
        (
         select mnth 
               , trip_distance
               , (unix_timestamp(tpep_dropoff_datetime) - unix_timestamp(tpep_pickup_datetime))/3600 as `Time_Taken`
               , tpep_dropoff_datetime
               , tpep_pickup_datetime
               , day(tpep_pickup_datetime) as `Trip_Day`
         from nyc_taxi_table_orc
        )t
    )t1
where mnth = 12 
and trip_day in (25,31);



-- Christmas Day(25th Dec) Analysis

-- Overall average speed      => 11.02 MPH
-- X-Mas Day average speed    => 13.68 MPH

-- Average speed on Christmas Day is higher than overall average speed for November and December by 2.66 MPH.



-- New year Eve(31st Dec) Analysis

-- Overall average speed      => 11.02 MPH
-- X-Mas Day average speed    => 13.24 MPH

-- Average speed on New Year's Eve is higher than overall average speed for November and December by 2.22 MPH.


-- Conclusion 
-- 25th Dec has the highest average speed recorded among the most happening days.

use chandan_upgrad;